name: Auto-Update N8N on Railway

on:
  schedule:
    - cron: '0 3 * * MON' # Запускать каждый понедельник в 03:00 UTC
  workflow_dispatch: # Позволяет запускать вручную

jobs:
  redeploy-n8n:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Это разрешение необходимо для коммита изменений обратно в репозиторий

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add or Update Cache Buster in Dockerfile
        id: cache_buster_step
        run: |
          # Генерируем уникальное значение на основе текущей даты/времени
          CURRENT_DATE=$(date +%Y%m%d%H%M%S)
          DOCKERFILE_PATH="Dockerfile" # Путь к вашему Dockerfile в корне репозитория

          # Проверяем, существует ли строка ARG CACHE_BUSTER= в Dockerfile
          if grep -q "ARG CACHE_BUSTER=" "$DOCKERFILE_PATH"; then
            # Если существует, заменяем ее на новую с актуальной датой
            sed -i "/ARG CACHE_BUSTER=/c\ARG CACHE_BUSTER=$CURRENT_DATE" "$DOCKERFILE_PATH"
            echo "Existing ARG CACHE_BUSTER updated in Dockerfile."
          else
            # Если строки нет, добавляем ее в конец файла
            echo "" >> "$DOCKERFILE_PATH" # Добавляем новую строку, если файл заканчивается без перевода строки
            echo "ARG CACHE_BUSTER=$CURRENT_DATE" >> "$DOCKERFILE_PATH"
            echo "New ARG CACHE_BUSTER added to Dockerfile."
          fi

          # Проверяем, были ли реальные изменения в файле после sed
          if git diff --exit-code "$DOCKERFILE_PATH"; then
            echo "Dockerfile unchanged, skipping commit."
            echo "dockerfile_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Dockerfile modified. Committing changes."
            echo "dockerfile_changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push Dockerfile Changes
        # Выполняем этот шаг только если Dockerfile был фактически изменен
        if: steps.cache_buster_step.outputs.dockerfile_changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Dockerfile
          # Добавляем [skip ci] в сообщение коммита, чтобы избежать рекурсивного запуска этого же workflow
          git commit -m "chore: Auto-update N8N (cache bust for new base image pull) [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Токен по умолчанию имеет необходимые права для записи

      # Этот шаг теперь является резервным, так как Railway должен сам развернуться по push-у.
      # Однако, оставляем его, так как он был в вашем "рабочем" скрипте.
      - name: Trigger N8N Redeploy via Railway API (Fallback/Redundant)
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            "https://api.railway.app/v2/projects/${{ env.RAILWAY_PROJECT_ID }}/services/${{ env.RAILWAY_SERVICE_ID }}/deploy"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }} # Токен для аутентификации в API
